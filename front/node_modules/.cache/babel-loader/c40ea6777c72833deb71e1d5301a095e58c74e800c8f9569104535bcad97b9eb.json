{"ast":null,"code":"const validation = userData => {\n  // const regexEmail = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{3})+$/; //Esta me cuelga todo al poner varios caracteres!\n  const regexEmail = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n  //const regexPass = new RegExp(\"[0-9]\");\n  const regexPass = /[0-9]/;\n  // const regexPass = new RegExp(\"^(?=.[a-z])(?=.[A-Z])(?=.*[0-9])(?=.{6,10})\");\n  const errors = {};\n  if (!userData.username) {\n    errors.username = \">> UserName: No puede quedar vacío\";\n  } else if (!regexEmail.test(userData.username)) {\n    errors.username = \">> UserName: Debe que ser un email\";\n  } else if (userData.username.length > 35) {\n    errors.username = \">> UserName: Máximo 35 caracteres\";\n  } else {\n    errors.username = \"\";\n  }\n\n  //esta regex testea si hay numero. tambien con includes podriamos hacerlo, pero sin la regex\n  if (!regexPass.test(userData.password)) {\n    errors.password = \">> Password: Al menos un número\";\n  } else if (userData.password.length < 6 || userData.password.length > 10) {\n    errors.password = \">> Password: Entre 6 y 10 caracteres\";\n  } else if (!userData.password) {\n    errors.password = \">> Password: No puede quedar vacía\";\n  } else {\n    errors.password = \"\";\n  }\n  return errors;\n\n  //User\n  //   if(!userData.username) setErrors({...errors, username: 'Ingrese usuario...'});\n  //   else {\n  //       if (/^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{3})+$/.test(userData.username))\n  //         setErrors({ ...errors, username: \"\" });\n  //       else setErrors({ ...errors, username: \"Usuario inválido\" });\n  //   }\n\n  //   Password\n  //   if(!userData.password) setErrors({...errors, password: 'Ingrese password...'});\n  //   else setErrors({...errors, password: ''});\n};\n\nexport default validation;","map":{"version":3,"names":["validation","userData","regexEmail","regexPass","errors","username","test","length","password"],"sources":["D:/Full-stack/bootcamp-henry/proyecto-Apps/rick_and_morty_JuanFacundoTam/front/src/components/Form/validation.js"],"sourcesContent":["const validation = (userData) => {\r\n  // const regexEmail = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{3})+$/; //Esta me cuelga todo al poner varios caracteres!\r\n  const regexEmail = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n  //const regexPass = new RegExp(\"[0-9]\");\r\n  const regexPass = /[0-9]/;\r\n  // const regexPass = new RegExp(\"^(?=.[a-z])(?=.[A-Z])(?=.*[0-9])(?=.{6,10})\");\r\n  const errors = {};\r\n\r\n  if (!userData.username) {\r\n    errors.username = \">> UserName: No puede quedar vacío\";\r\n  } else if (!regexEmail.test(userData.username)) {\r\n    errors.username = \">> UserName: Debe que ser un email\";\r\n  } else if (userData.username.length > 35) {\r\n    errors.username = \">> UserName: Máximo 35 caracteres\";\r\n  } else {\r\n    errors.username = \"\";\r\n  }\r\n\r\n  //esta regex testea si hay numero. tambien con includes podriamos hacerlo, pero sin la regex\r\n  if (!regexPass.test(userData.password)) {\r\n    errors.password = \">> Password: Al menos un número\";\r\n  } else if (userData.password.length < 6 || userData.password.length > 10) {\r\n    errors.password = \">> Password: Entre 6 y 10 caracteres\";\r\n  } else if (!userData.password) {\r\n    errors.password = \">> Password: No puede quedar vacía\";\r\n  } else {\r\n    errors.password = \"\";\r\n  }\r\n  return errors;\r\n\r\n  //User\r\n  //   if(!userData.username) setErrors({...errors, username: 'Ingrese usuario...'});\r\n  //   else {\r\n  //       if (/^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{3})+$/.test(userData.username))\r\n  //         setErrors({ ...errors, username: \"\" });\r\n  //       else setErrors({ ...errors, username: \"Usuario inválido\" });\r\n  //   }\r\n\r\n  //   Password\r\n  //   if(!userData.password) setErrors({...errors, password: 'Ingrese password...'});\r\n  //   else setErrors({...errors, password: ''});\r\n};\r\n\r\nexport default validation;\r\n"],"mappings":"AAAA,MAAMA,UAAU,GAAIC,QAAQ,IAAK;EAC/B;EACA,MAAMC,UAAU,GAAG,uJAAuJ;EAC1K;EACA,MAAMC,SAAS,GAAG,OAAO;EACzB;EACA,MAAMC,MAAM,GAAG,CAAC,CAAC;EAEjB,IAAI,CAACH,QAAQ,CAACI,QAAQ,EAAE;IACtBD,MAAM,CAACC,QAAQ,GAAG,oCAAoC;EACxD,CAAC,MAAM,IAAI,CAACH,UAAU,CAACI,IAAI,CAACL,QAAQ,CAACI,QAAQ,CAAC,EAAE;IAC9CD,MAAM,CAACC,QAAQ,GAAG,oCAAoC;EACxD,CAAC,MAAM,IAAIJ,QAAQ,CAACI,QAAQ,CAACE,MAAM,GAAG,EAAE,EAAE;IACxCH,MAAM,CAACC,QAAQ,GAAG,mCAAmC;EACvD,CAAC,MAAM;IACLD,MAAM,CAACC,QAAQ,GAAG,EAAE;EACtB;;EAEA;EACA,IAAI,CAACF,SAAS,CAACG,IAAI,CAACL,QAAQ,CAACO,QAAQ,CAAC,EAAE;IACtCJ,MAAM,CAACI,QAAQ,GAAG,iCAAiC;EACrD,CAAC,MAAM,IAAIP,QAAQ,CAACO,QAAQ,CAACD,MAAM,GAAG,CAAC,IAAIN,QAAQ,CAACO,QAAQ,CAACD,MAAM,GAAG,EAAE,EAAE;IACxEH,MAAM,CAACI,QAAQ,GAAG,sCAAsC;EAC1D,CAAC,MAAM,IAAI,CAACP,QAAQ,CAACO,QAAQ,EAAE;IAC7BJ,MAAM,CAACI,QAAQ,GAAG,oCAAoC;EACxD,CAAC,MAAM;IACLJ,MAAM,CAACI,QAAQ,GAAG,EAAE;EACtB;EACA,OAAOJ,MAAM;;EAEb;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;AACF,CAAC;;AAED,eAAeJ,UAAU"},"metadata":{},"sourceType":"module","externalDependencies":[]}